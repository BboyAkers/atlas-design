/**
 * Convert a Sass rule or subrule into a token friendly format.
 * @param {import('./types').SassRule} rule A rule generated by convert-sass
 * @param {string} [name] The name of the token.
 * @returns any
 */
function convertSassVariable(rule, name) {
	switch (rule.type) {
		case 'SassString':
			return convertString(rule, name);
		case 'SassNumber':
			return convertNumber(rule, name);
		case 'SassList':
			return convertList(rule, name);
		case 'SassMap':
			return convertMap(rule, name);
		case 'SassColor':
			return convertColor(rule, name);
		case 'SassBoolean':
			return convertBool(rule, name);
		default:
			throw new Error(`Unexpected Sass type encountered: ${JSON.stringify(rule)}`);
	}
}

/**
 * Converts to string rule into a token friendly object
 * @param {import("./types").SassStringRule} rule
 * @param {string} [name] The Sass variable Name
 */
function convertString(rule, name) {
	if (!name) {
		return rule.value;
	}
	return { [name]: rule.value };
}

/**
 * Converts to string rule into a token friendly object
 * @param {import("./types").SassNumberRule} rule
 * @param {string} [name] The Sass variable Name
 */
function convertNumber(rule, name) {
	const value = `${rule.value}${rule.unit || ''}`;
	if (!name) {
		return value;
	}
	return { [name]: value };
}

/**
 * Converts to array rule into a token friendly object
 * @param {import("./types").SassListRule} rule
 * @param {string} [name]
 * @return any
 */
function convertList(rule, name) {
	/** @type string */
	const value = rule.value.map(v => convertSassVariable(v)).join(`${rule.separator} `);
	if (!name) {
		return value;
	}
	return { [name]: value };
}

/**
 * Converts a map rule into a token friendly object.
 * Recurses through subproperties to convert them.
 * @param {import('./types').SassMapRule} rule
 * @param {string} [name]
 * @return any
 */
function convertMap(rule, name) {
	const children = {};
	for (const subprop in rule.value) {
		// @ts-ignore
		children[subprop] = convertSassVariable(rule.value[subprop]);
	}
	if (!name) {
		return children;
	}
	return { [name]: children };
}

/**
 * @param {import("./types").SassBooleanRule} rule
 * @param {string} [name]
 * @return any
 */
function convertBool(rule, name) {
	if (!name) {
		return rule.value;
	}
	return { [name]: rule.value };
}

/**
 * @param {import("./types").SassColorRule} rule
 * @param {string} [name]
 * @return any
 */
function convertColor(rule, name) {
	if (!name) {
		return rule.value;
	}

	return {
		[name]: {
			...rule.value
		}
	};
}

module.exports.convertSassVariable = convertSassVariable;
