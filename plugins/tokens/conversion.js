/**
 * Convert a Sass rule or subrule into a token friendly format.
 * @param {import('./types').SassRule} rule A rule generated by convert-sass
 * @param {string} name The name of the token.
 * @returns any
 */
function convertSassVariable(rule, name) {
	switch (rule.type) {
		case 'SassString':
			return convertString(name, rule);
		case 'SassNumber':
			return convertNumber(name, rule);
		case 'SassList':
			return convertList(name, rule);
		case 'SassMap':
			return convertMap(name, rule);
		case 'SassColor':
			return convertColor(name, rule);
		default:
			throw new Error(`Unexpected Sass type encountered: ${JSON.stringify(rule)}`);
	}
}

/**
 * Converts to string rule into a token friendly object
 * @param {string} name The Sass variable Name
 * @param {import("./types").SassStringRule} rule
 * @returns {import("./types").AtlasRule}
 */
function convertString(name, rule) {
	const parent = getTokenFromSource(rule);
	return {
		parent,
		name,
		type: rule.type,
		value: rule.value,
		default: getDefault(rule),
		raw: getExpression(rule),
		filePath: getAtlasFilePath(rule)
	};
}

/**
 * Expressions are how the rule was written by the developer.
 * @param {import('./types').SassRule} rule
 * @returns string
 */
function getExpression(rule) {
	if (rule.declarations && rule.declarations[0] && rule.declarations[0].expression) {
		return rule.declarations[0].expression;
	}
	return '';
}

/**
 * Rules returned by sass-convert sometimes contain the file source from which they're declared.
 * @param {import('./types').SassRule} rule
 * @returns string
 */
function getTokenFromSource(rule) {
	if (rule.sources && rule.sources.length > 0) {
		return getFinalFilePart(rule.sources[0]);
	}
	return 'other';
}

/**
 * Slice off unwanted parts of a scss files file path.
 * @param {string} filePath
 * @returns string
 */
function getFinalFilePart(filePath) {
	return filePath.slice(filePath.lastIndexOf('/') + 1).replace('.scss', '');
}

/**
 * Determine whether a rule's declaration used the !default keyword.
 * @param {import("./types").SassRule} rule
 * @returns boolean
 */
function getDefault(rule) {
	if (rule && rule.declarations && rule.declarations.length > 0) {
		rule.declarations[0].flags.default;
	}
	return false;
}

/**
 * Get Atlas relative path from absolute file path returned by sass-convert.
 * @param {import("./types").SassRule} rule
 * @returns string
 */
function getAtlasFilePath(rule) {
	if (rule.sources && rule.sources.length > 0) {
		return rule.sources[0].split('atlas-design')[1];
	}
	return '';
}

/**
 * Converts to string rule into a token friendly object
 * @param {string} name The Sass variable Name
 * @param {import("./types").SassNumberRule} rule
 * @returns {import("./types").AtlasRule}
 */
function convertNumber(name, rule) {
	const parent = getTokenFromSource(rule);
	return {
		type: rule.type,
		// @ts-ignore
		unit: rule.unit,
		parent,
		name,
		value: rule.value,
		default: getDefault(rule),
		raw: getExpression(rule),
		filePath: getAtlasFilePath(rule)
	};
}

/**
 * Converts to array rule into a token friendly object
 * @param {string} name
 * @param {import("./types").SassListRule} rule
 * @returns {import("./types").AtlasRule}
 */
function convertList(name, rule) {
	const parent = getTokenFromSource(rule);
	const subvalues = rule.value.map(v => convertSassVariable(v, 'local'));
	return {
		parent,
		name,
		value: subvalues,
		type: rule.type,
		separator: rule.seperator,
		default: getDefault(rule),
		raw: getExpression(rule),
		filePath: getAtlasFilePath(rule)
	};
}

/**
 * Converts a map rule into a token friendly object.
 * Recurses through subproperties to convert them.
 * @param {string} name
 * @param {import('./types').SassMapRule} rule
 * @returns {import("./types").AtlasRule}
 */
function convertMap(name, rule) {
	const parent = getTokenFromSource(rule);
	for (const subprop in rule.value) {
		// @ts-ignore
		rule.value[subprop] = convertSassVariable(rule.value[subprop], 'local');
	}
	return {
		parent,
		name,
		value: rule.value,
		type: rule.type,
		raw: getExpression(rule),
		default: getDefault(rule),
		filePath: getAtlasFilePath(rule)
	};
}

/**
 * @param {string} name
 * @param {import("./types").SassColorRule} rule
 * @returns {import("./types").AtlasRule}
 */
function convertColor(name, rule) {
	const parent = getTokenFromSource(rule);
	return {
		parent,
		name,
		type: rule.type,
		value: rule.value,
		raw: getExpression(rule),
		default: getDefault(rule),
		filePath: getAtlasFilePath(rule)
	};
}

module.exports.convertSassVariable = convertSassVariable;
module.exports.convertString = convertString;
module.exports.getExpression = getExpression;
module.exports.getTokenFromSource = getTokenFromSource;
module.exports.getFinalFilePart = getFinalFilePart;
module.exports.getDefault = getDefault;
module.exports.getAtlasFilePath = getAtlasFilePath;
module.exports.convertNumber = convertNumber;
module.exports.convertList = convertList;
module.exports.convertMap = convertMap;
module.exports.convertColor = convertColor;
